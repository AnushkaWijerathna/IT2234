import javax.swing.JFrame;
import java.awt.Graphics;

public class BresenhamCircle extends JFrame{
	

    private int xc,yc,r;


	
	public BresenhamCircle(){
       
       
		setTitle("BCL");
		setSize(500,500);
        setLocationRelativeTo(null);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setVisible(true);
	}
	
    @Override
	public void paint(Graphics g){
		super.paint(g);

        //center of the circle
        int xc = 200, yc = 200;
        int radius = 100;
    
        //draw circle using Bresenham's algorithm
		drawBresenhamCircle(g, xc, yc, radius);
		
	}

   
	private void drawBresenhamCircle(Graphics g, int xc, int yc, int r){
	
        int x = 0;
        int y = r;
		int d = 3 - 2 * r; //initial decision paramaeter

        while(x <= y){
            x++;

            if(d < 0){
                d += 4 * x + 6;
            }
            else{
                y--;
                d += 4 * (x - y) + 10;
            }

            plotCirclePoints(g, xc, yc, x, y);

        }
	
	}


    private void plotCirclePoints(Graphics g, int xc, int yc, int x, int y) {
        g.drawLine(xc + x, yc + y, xc + x, yc + y);
        g.drawLine(xc - x, yc + y, xc - x, yc + y);
        g.drawLine(xc + x, yc - y, xc + x, yc - y);
        g.drawLine(xc - x, yc - y, xc - x, yc - y);
        g.drawLine(xc + y, yc + x, xc + y, yc + x);
        g.drawLine(xc - y, yc + x, xc - y, yc + x);
        g.drawLine(xc + y, yc - x, xc + y, yc - x);
        g.drawLine(xc - y, yc - x, xc - y, yc - x);
       
        
    }


	//main method
	public static void main(String args[]){
		new BresenhamCircle();
	}
	
	

}